/**
 * =====================================
 * LogData ( theLogLevel ; theLogMessage ; JSONObjectToLog )
 *
 * RETURNS:
 *		(string) JSON Object which describes the current environment.
 *
 * PARAMETERS:
 *		theLogLevel = (numeric) 0 thru [n]
 *		theLogMessage = (text, optional) some text describing the log entry
 *		JSONObjectToLog = (optional) a JSON Object containing additional data to log
 *			this will be the base object that additional data is added to
 *
 * EXAMPLE:
 *		LogData ( LogLevel2Warn ; "error when going to layout: 'Customer: Detail'" )
 *			// where LogLevel2Warn is a custom function which returns a number
 *		LogData ( $logLevelDebug ; "start section: create related records" )
 *			// where $logLevelDebug contains the numeric representation of a debug level log entry
 *		LogData ( 3 ; "script runtime: 0.3 seconds" )
 *
 * NOTES:
 *		This function should be modified to capture any relevant values for your solution.
 *
 * HISTORY:
 *		MODIFIED on 2024-JUL-12 by Daniel Smith dan@filemaker.consulting
 *			- use JSONGetElementType for ScriptParameter and ScriptResult
 *			- remove ScriptResult; that's more relevant to errors and should be manually
 *			  added to non-error log entries, if needed
 *			- replace CurrentHostTimestamp with TimestampUTC
 *		MODIFIED on 2024-APR-16 by Daniel Smith dan@filemaker.consulting
 *			- convert to JSON and add JSONObjectToLog parameter
 *		MODIFIED on 2015-JUN-02 by Daniel Smith dansmith65@gmail.com
 *			- include ApplicationVersion for all log levels
 *		MODIFIED on 2014-OCT-02 by Daniel Smith dansmith65@gmail.com
 *			- add: AccountPrivilegeSetName, CurrentPrivilegeSetName, logLevelToWriteOffset, LOGLEVELTOWRITEOFFSETglobal
 *			- move UserName to the ALL LOG LEVELS section (helps to differentiate two users logged on with the same account)
 *			- include additional detail when log level is = 2 rather than = 1
 *			- change theMessage parameter to theLogMessage
 *			- encode theLogMessage parameter as logMessage instead of message
 *			- modify documentation/notes
 *		MODIFIED on 2014-FEB-05 by Daniel Smith dansmith65@gmail.com
 *			- prepend parameter with "the" to prevent collision
 *			- add theMessage parameter
 *			- remove session-specific values (see LogDataSession function)
 *			- manually encode name/value pairs, remove dependency on #
 *			- add values added in FileMaker 13
 *			- disable UserCount
 *		MODIFIED on 2014-JAN-11 matt@filemakermagazine.com to use numeric logLevel
 *		MODIFIED on 2012-NOV-21 by Daniel Smith dansmith65@gmail.com
 *			- don't access $error variable directly
 *		CREATED on 2012-NOV-21 Daniel Smith dansmith65@gmail.com
 *		INSPIRED by ErrorData by matt@filemakermagazine.com
 *			https://github.com/filemakerstandards/fmpstandards/tree/master/Functions
 *
 * LINK:
 *		https://github.com/dansmith65/FileMaker-Logger
 * =====================================
 */

Let ( [
	~result = Case (
		IsEmpty ( JSONObjectToLog ) ;
			"{}"
		;
		JSONGetElementType ( JSONObjectToLog ; "" ) = JSONObject ;
			JSONObjectToLog
		;
		/* else: store it as a string */
			JSONSetElement ( "{}" ; "JSONObjectToLog" ; JSONObjectToLog ; JSONString )
	) ;
	~result = JSONSetElement ( ~result ;
		[ "logLevel" ; theLogLevel ; JSONNumber ] ;
		[ "logMessage" ; theLogMessage ; JSONString ] ;
		[ "AccountName" ; Get ( AccountName ) ; JSONString ] ;
		[ "UserName" ; Get ( UserName ) ; JSONString ] ;
		[ "TimestampUTC" ; GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) ; JSONString ] ;
		[ "FileName" ; Get ( FileName ) ; JSONString ] ;
		[ "ScriptName" ; Get ( ScriptName ) ; JSONString ] ;
		[ "ScriptParameter" ; Get ( ScriptParameter ) ; JSONGetElementType ( Get ( ScriptParameter ) ; "" )  ] ;
		[ "ApplicationVersion" ; Get ( ApplicationVersion ) ; JSONString ] ;
		[ "AccountPrivilegeSetName" ; Get ( AccountPrivilegeSetName ) ; JSONString ] ;
		[ "CurrentPrivilegeSetName" ; Get ( CurrentPrivilegeSetName ) ; JSONString ]
	) ;
	~result = If ( IsEmpty ( $logLevelToWriteOffset ) ; ~result ;
		JSONSetElement ( ~result ; "logLevelToWriteOffset" ; $logLevelToWriteOffset ; JSONNumber )
	) ;
	~result = If ( IsEmpty ( $$LOGLEVELTOWRITEOFFSET ) ; ~result ;
		JSONSetElement ( ~result ; "LOGLEVELTOWRITEOFFSET" ; $$LOGLEVELTOWRITEOFFSET ; JSONNumber )
	) ;
	~result = If ( theLogLevel > 2 ; ~result ;
		JSONSetElement ( ~result ;
			[ "AllowAbortState" ; Get ( AllowAbortState ) ; JSONNumber ] ;
			[ "ErrorCaptureState" ; Get ( ErrorCaptureState ) ; JSONNumber ] ;
			[ "FilePath" ; Get ( FilePath ) ; JSONString ] ;
			[ "LayoutAccess" ; Get ( LayoutAccess ) ; JSONNumber ] ;
			[ "LayoutName" ; Get ( LayoutName ) ; JSONString ] ;
			[ "LayoutTableName" ; Get ( LayoutTableName ) ; JSONString ] ;
			[ "LayoutViewState" ; Get ( LayoutViewState ) ; JSONNumber ] ;
			[ "MultiUserState" ; Get ( MultiUserState ) ; JSONNumber ] ;
			[ "RecordAccess" ; Get ( RecordAccess ) ; JSONNumber ] ;
			[ "RecordID" ; Get ( RecordID ) ; JSONNumber ] ;
			[ "RecordOpenCount" ; Get ( RecordOpenCount ) ; JSONNumber ] ;
			[ "RecordOpenState" ; Get ( RecordOpenState ) ; JSONNumber ] ;
			[ "SortState" ; Get ( SortState ) ; JSONNumber ] ;
			[ "StatusAreaState" ; Get ( StatusAreaState ) ; JSONNumber ] ;
			[ "WindowMode" ; Get ( WindowMode ) ; JSONNumber ] ;
			[ "WindowName" ; Get ( WindowName ) ; JSONString ] ;
			[ "WindowOrientation" ; Get ( WindowOrientation ) ; JSONString ] ;
			[ "WindowStyle" ; Get ( WindowStyle ) ; JSONNumber ] ;
			[ "WindowVisible" ; Get ( WindowVisible ) ; JSONNumber ] ;
			[ "ActiveFieldName" ; Get ( ActiveFieldName ) ; JSONString ] ;
			[ "ActiveFieldTableName" ; Get ( ActiveFieldTableName ) ; JSONString ] ;
			[ "ActiveLayoutObjectName" ; Get ( ActiveLayoutObjectName ) ; JSONString ]
		)
	)
] ; ~result )