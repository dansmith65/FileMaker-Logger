/**
 * =====================================
 * LogDataSession ( JSONLogData )
 *
 * RETURNS:
 *		(string) JSONLogData with environmental data pertaining to the current session added to it.
 *
 * PARAMETERS:
 *		JSONLogData = (JSONObject) as returned by the LogData function
 *
 * DEPENDENCIES:
 *		$$SESSIONID global variable
 *
 * NOTES:
 *		This function should be modified to capture the relevant session values for your solution.
 *		Modify all log entries with this function.
 *		In a multi-file solution, consider these options:
 *
 *		1.	Calling this function from the file that writes the logs will
 *			cause a session to include any file that was used the entire
 *			time the log writing file was open.
 *
 *		2.	Calling this function from every file will allow each file
 *			to maintain their own session, but will not easily allow you to
 *			see which files were opened during a single session.
 *
 * HISTORY:
 *		MODIFIED on 2024-JUL-12 Daniel Smith dan@filemaker.consulting
 *			- add JSONLogData parameter and convert from Let Notation to JSONObject
 *		MODIFIED on 2024-APR-16 Daniel Smith dan@filemaker.consulting
 *			- delete: CurrentTimestamp
 *			- rename HighContrastColor to SystemAppearance
 *			- add: ApplicationArchitecture, HostApplicationVersion, PersistentID, TimezoneOffset,
 *			  NetworkType, StatusAreaState, ScreenScaleFactor, multiple Window values
 *		MODIFIED on 2015-JUN-02 Daniel Smith dansmith65@gmail.com
 *			- Quote HighContrastState value since it is empty in Web Direct
 *		MODIFIED on 2014-OCT-02 Daniel Smith dansmith65@gmail.com
 *			- update documentation
 *		CREATED on 2014-FEB-05 Daniel Smith dansmith65@gmail.com
 *
 * LINK:
 *		https://github.com/dansmith65/FileMaker-Logger
 * =====================================
 */

If ( JSONGetElementType ( JSONLogData ; "" ) â‰  JSONObject ;
	/* return parameter as-is since it's not a JSONObject */
	JSONLogData ;
	
	If ( IsEmpty ( $$SESSIONID ) ;
		/* session has not started yet, so create a session id and return session data */
		Let ( [
			$$SESSIONID = Get ( UUID ) ;
			~sessionData =
				JSONSetElement ( "{}" ;
					[ "ID" ; $$SESSIONID ; JSONString ] ;
					[ "ApplicationArchitecture" ; Get ( ApplicationArchitecture ) ; JSONString ] ;
					[ "ApplicationLanguage" ; Get ( ApplicationLanguage ) ; JSONString ] ;
					[ "ApplicationVersion" ; Get ( ApplicationVersion ) ; JSONString ] ;
					[ "ConnectionState" ; Get ( ConnectionState ) ; JSONNumber ] ;
					[ "Device" ; Get ( Device ) ; JSONNumber  ] ;
					[ "EncryptionState" ; Get ( EncryptionState ) ; JSONString ] ;
					[ "FileMakerPath" ; Get ( FileMakerPath ) ; JSONString ] ;
					[ "HighContrastState" ; Get ( HighContrastState ) ; JSONNumber  ] ;
					[ "HostApplicationVersion" ; Get ( HostApplicationVersion ) ; JSONString ] ;
					[ "HostIPAddress" ; Get ( HostIPAddress ) ; JSONString ] ;
					[ "HostName" ; Get ( HostName ) ; JSONString ] ;
					[ "InstalledFMPlugins" ; Get ( InstalledFMPlugins ) ; JSONString ] ;
					[ "SystemAppearance" ; Get ( SystemAppearance ) ; JSONString ] ;
					[ "SystemIPAddress" ; Get ( SystemIPAddress ) ; JSONString ] ;
					[ "SystemLanguage" ; Get ( SystemLanguage ) ; JSONString ] ;
					[ "SystemNICAddress" ; Get ( SystemNICAddress ) ; JSONString ] ;
					[ "SystemPlatform" ; Get ( SystemPlatform ) ; JSONNumber ] ;
					[ "SystemVersion" ; Get ( SystemVersion ) ; JSONString ] ;
					[ "UseSystemFormatsState" ; Get ( UseSystemFormatsState ) ; JSONNumber ] ;
					[ "PersistentID" ; Get ( PersistentID ) ; JSONString ] ;
					[ "TimezoneOffset" ;
						GetAsTime (
							Get ( CurrentTimestamp ) - Floor ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )
						)
					; JSONString ] ;
					[ "NetworkType" ; Get ( NetworkType ) ; JSONString ] /* Only relevant for FM Go and returns a number */
				)
			;
			~sessionData = If ( Position ( Get ( ApplicationVersion ) ; "Server" ; 1 ; 1 ) = 1 ; ~sessionData ;
				/**
				 * log screen/window size info so it can inform UI design decisions
				 * don't log this for the server; it's windows are not shown to the user
				 */
				JSONSetElement ( ~sessionData ;
					[ "StatusAreaState" ; Get ( StatusAreaState ) ; JSONNumber ] ;
					[ "ScreenWidth" ; Get ( ScreenWidth ) ; JSONNumber ] ;
					[ "ScreenHeight" ; Get ( ScreenHeight ) ; JSONNumber ] ;
					[ "ScreenDepth" ; Get ( ScreenDepth ) ; JSONNumber ] ;
					[ "ScreenScaleFactor" ; Get ( ScreenScaleFactor ) ; JSONNumber ] ;
					[ "WindowDesktopWidth" ; Get ( WindowDesktopWidth ) ; JSONNumber ] ;
					[ "WindowDesktopHeight" ; Get ( WindowDesktopHeight ) ; JSONNumber ] ;
					[ "WindowWidth" ; Get ( WindowWidth ) ; JSONNumber ] ;
					[ "WindowHeight" ; Get ( WindowHeight ) ; JSONNumber ] ;
					[ "WindowContentWidth" ; Get ( WindowContentWidth ) ; JSONNumber ] ;
					[ "WindowContentHeight" ; Get ( WindowContentHeight ) ; JSONNumber ] ;
					[ "WindowOrientation" ; Get ( WindowOrientation ) ; JSONNumber ]
				)
			)
		] ;
			JSONSetElement ( JSONLogData ; "SESSION" ; ~sessionData ; JSONObject )
		) ;
		
		/* else: add existing session id */
		JSONSetElement ( JSONLogData ;
			[ "SESSION.ID" ; $$SESSIONID ; JSONString ]
		)
	)
)